// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/vendor.proto

#include "protos/vendor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace vendor {
PROTOBUF_CONSTEXPR BidQuery::BidQuery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.product_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BidQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BidQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BidQueryDefaultTypeInternal() {}
  union {
    BidQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BidQueryDefaultTypeInternal _BidQuery_default_instance_;
PROTOBUF_CONSTEXPR BidReply::BidReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vendor_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.price_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BidReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BidReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BidReplyDefaultTypeInternal() {}
  union {
    BidReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BidReplyDefaultTypeInternal _BidReply_default_instance_;
}  // namespace vendor
static ::_pb::Metadata file_level_metadata_protos_2fvendor_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_protos_2fvendor_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_protos_2fvendor_2eproto = nullptr;

const uint32_t TableStruct_protos_2fvendor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vendor::BidQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vendor::BidQuery, _impl_.product_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vendor::BidReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vendor::BidReply, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::vendor::BidReply, _impl_.vendor_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::vendor::BidQuery)},
  { 7, -1, -1, sizeof(::vendor::BidReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::vendor::_BidQuery_default_instance_._instance,
  &::vendor::_BidReply_default_instance_._instance,
};

const char descriptor_table_protodef_protos_2fvendor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023protos/vendor.proto\022\006vendor\" \n\010BidQuer"
  "y\022\024\n\014product_name\030\001 \001(\t\",\n\010BidReply\022\r\n\005p"
  "rice\030\001 \001(\001\022\021\n\tvendor_id\030\002 \001(\t2\?\n\006Vendor\022"
  "5\n\rgetProductBid\022\020.vendor.BidQuery\032\020.ven"
  "dor.BidReply\"\000b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_protos_2fvendor_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fvendor_2eproto = {
    false, false, 182, descriptor_table_protodef_protos_2fvendor_2eproto,
    "protos/vendor.proto",
    &descriptor_table_protos_2fvendor_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_protos_2fvendor_2eproto::offsets,
    file_level_metadata_protos_2fvendor_2eproto, file_level_enum_descriptors_protos_2fvendor_2eproto,
    file_level_service_descriptors_protos_2fvendor_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fvendor_2eproto_getter() {
  return &descriptor_table_protos_2fvendor_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fvendor_2eproto(&descriptor_table_protos_2fvendor_2eproto);
namespace vendor {

// ===================================================================

class BidQuery::_Internal {
 public:
};

BidQuery::BidQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vendor.BidQuery)
}
BidQuery::BidQuery(const BidQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BidQuery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.product_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.product_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.product_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_product_name().empty()) {
    _this->_impl_.product_name_.Set(from._internal_product_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:vendor.BidQuery)
}

inline void BidQuery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.product_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.product_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.product_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BidQuery::~BidQuery() {
  // @@protoc_insertion_point(destructor:vendor.BidQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BidQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.product_name_.Destroy();
}

void BidQuery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BidQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:vendor.BidQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.product_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BidQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string product_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_product_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vendor.BidQuery.product_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BidQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vendor.BidQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string product_name = 1;
  if (!this->_internal_product_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_product_name().data(), static_cast<int>(this->_internal_product_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vendor.BidQuery.product_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_product_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vendor.BidQuery)
  return target;
}

size_t BidQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vendor.BidQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string product_name = 1;
  if (!this->_internal_product_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_product_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BidQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BidQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BidQuery::GetClassData() const { return &_class_data_; }


void BidQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BidQuery*>(&to_msg);
  auto& from = static_cast<const BidQuery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vendor.BidQuery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_product_name().empty()) {
    _this->_internal_set_product_name(from._internal_product_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BidQuery::CopyFrom(const BidQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vendor.BidQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidQuery::IsInitialized() const {
  return true;
}

void BidQuery::InternalSwap(BidQuery* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.product_name_, lhs_arena,
      &other->_impl_.product_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BidQuery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fvendor_2eproto_getter, &descriptor_table_protos_2fvendor_2eproto_once,
      file_level_metadata_protos_2fvendor_2eproto[0]);
}

// ===================================================================

class BidReply::_Internal {
 public:
};

BidReply::BidReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vendor.BidReply)
}
BidReply::BidReply(const BidReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BidReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vendor_id_){}
    , decltype(_impl_.price_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.vendor_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vendor_id().empty()) {
    _this->_impl_.vendor_id_.Set(from._internal_vendor_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.price_ = from._impl_.price_;
  // @@protoc_insertion_point(copy_constructor:vendor.BidReply)
}

inline void BidReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vendor_id_){}
    , decltype(_impl_.price_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.vendor_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BidReply::~BidReply() {
  // @@protoc_insertion_point(destructor:vendor.BidReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BidReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vendor_id_.Destroy();
}

void BidReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BidReply::Clear() {
// @@protoc_insertion_point(message_clear_start:vendor.BidReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vendor_id_.ClearToEmpty();
  _impl_.price_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BidReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string vendor_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_vendor_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vendor.BidReply.vendor_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BidReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vendor.BidReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double price = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price = this->_internal_price();
  uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_price(), target);
  }

  // string vendor_id = 2;
  if (!this->_internal_vendor_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendor_id().data(), static_cast<int>(this->_internal_vendor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vendor.BidReply.vendor_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vendor_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vendor.BidReply)
  return target;
}

size_t BidReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vendor.BidReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vendor_id = 2;
  if (!this->_internal_vendor_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendor_id());
  }

  // double price = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price = this->_internal_price();
  uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BidReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BidReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BidReply::GetClassData() const { return &_class_data_; }


void BidReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BidReply*>(&to_msg);
  auto& from = static_cast<const BidReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vendor.BidReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vendor_id().empty()) {
    _this->_internal_set_vendor_id(from._internal_vendor_id());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price = from._internal_price();
  uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BidReply::CopyFrom(const BidReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vendor.BidReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidReply::IsInitialized() const {
  return true;
}

void BidReply::InternalSwap(BidReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vendor_id_, lhs_arena,
      &other->_impl_.vendor_id_, rhs_arena
  );
  swap(_impl_.price_, other->_impl_.price_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BidReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fvendor_2eproto_getter, &descriptor_table_protos_2fvendor_2eproto_once,
      file_level_metadata_protos_2fvendor_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace vendor
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vendor::BidQuery*
Arena::CreateMaybeMessage< ::vendor::BidQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vendor::BidQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::vendor::BidReply*
Arena::CreateMaybeMessage< ::vendor::BidReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vendor::BidReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
