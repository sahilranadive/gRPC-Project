// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/store.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fstore_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fstore_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fstore_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fstore_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fstore_2eproto;
namespace store {
class ProductInfo;
struct ProductInfoDefaultTypeInternal;
extern ProductInfoDefaultTypeInternal _ProductInfo_default_instance_;
class ProductQuery;
struct ProductQueryDefaultTypeInternal;
extern ProductQueryDefaultTypeInternal _ProductQuery_default_instance_;
class ProductReply;
struct ProductReplyDefaultTypeInternal;
extern ProductReplyDefaultTypeInternal _ProductReply_default_instance_;
}  // namespace store
PROTOBUF_NAMESPACE_OPEN
template<> ::store::ProductInfo* Arena::CreateMaybeMessage<::store::ProductInfo>(Arena*);
template<> ::store::ProductQuery* Arena::CreateMaybeMessage<::store::ProductQuery>(Arena*);
template<> ::store::ProductReply* Arena::CreateMaybeMessage<::store::ProductReply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace store {

// ===================================================================

class ProductQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:store.ProductQuery) */ {
 public:
  inline ProductQuery() : ProductQuery(nullptr) {}
  ~ProductQuery() override;
  explicit PROTOBUF_CONSTEXPR ProductQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProductQuery(const ProductQuery& from);
  ProductQuery(ProductQuery&& from) noexcept
    : ProductQuery() {
    *this = ::std::move(from);
  }

  inline ProductQuery& operator=(const ProductQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProductQuery& operator=(ProductQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProductQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProductQuery* internal_default_instance() {
    return reinterpret_cast<const ProductQuery*>(
               &_ProductQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProductQuery& a, ProductQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(ProductQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProductQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProductQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProductQuery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProductQuery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProductQuery& from) {
    ProductQuery::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProductQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "store.ProductQuery";
  }
  protected:
  explicit ProductQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductNameFieldNumber = 1,
  };
  // string product_name = 1;
  void clear_product_name();
  const std::string& product_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_product_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_product_name();
  PROTOBUF_NODISCARD std::string* release_product_name();
  void set_allocated_product_name(std::string* product_name);
  private:
  const std::string& _internal_product_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_product_name(const std::string& value);
  std::string* _internal_mutable_product_name();
  public:

  // @@protoc_insertion_point(class_scope:store.ProductQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fstore_2eproto;
};
// -------------------------------------------------------------------

class ProductReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:store.ProductReply) */ {
 public:
  inline ProductReply() : ProductReply(nullptr) {}
  ~ProductReply() override;
  explicit PROTOBUF_CONSTEXPR ProductReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProductReply(const ProductReply& from);
  ProductReply(ProductReply&& from) noexcept
    : ProductReply() {
    *this = ::std::move(from);
  }

  inline ProductReply& operator=(const ProductReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProductReply& operator=(ProductReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProductReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProductReply* internal_default_instance() {
    return reinterpret_cast<const ProductReply*>(
               &_ProductReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProductReply& a, ProductReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ProductReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProductReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProductReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProductReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProductReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProductReply& from) {
    ProductReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProductReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "store.ProductReply";
  }
  protected:
  explicit ProductReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductsFieldNumber = 1,
  };
  // repeated .store.ProductInfo products = 1;
  int products_size() const;
  private:
  int _internal_products_size() const;
  public:
  void clear_products();
  ::store::ProductInfo* mutable_products(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::store::ProductInfo >*
      mutable_products();
  private:
  const ::store::ProductInfo& _internal_products(int index) const;
  ::store::ProductInfo* _internal_add_products();
  public:
  const ::store::ProductInfo& products(int index) const;
  ::store::ProductInfo* add_products();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::store::ProductInfo >&
      products() const;

  // @@protoc_insertion_point(class_scope:store.ProductReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::store::ProductInfo > products_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fstore_2eproto;
};
// -------------------------------------------------------------------

class ProductInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:store.ProductInfo) */ {
 public:
  inline ProductInfo() : ProductInfo(nullptr) {}
  ~ProductInfo() override;
  explicit PROTOBUF_CONSTEXPR ProductInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProductInfo(const ProductInfo& from);
  ProductInfo(ProductInfo&& from) noexcept
    : ProductInfo() {
    *this = ::std::move(from);
  }

  inline ProductInfo& operator=(const ProductInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProductInfo& operator=(ProductInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProductInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProductInfo* internal_default_instance() {
    return reinterpret_cast<const ProductInfo*>(
               &_ProductInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProductInfo& a, ProductInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProductInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProductInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProductInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProductInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProductInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProductInfo& from) {
    ProductInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProductInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "store.ProductInfo";
  }
  protected:
  explicit ProductInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVendorIdFieldNumber = 2,
    kPriceFieldNumber = 1,
  };
  // string vendor_id = 2;
  void clear_vendor_id();
  const std::string& vendor_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vendor_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vendor_id();
  PROTOBUF_NODISCARD std::string* release_vendor_id();
  void set_allocated_vendor_id(std::string* vendor_id);
  private:
  const std::string& _internal_vendor_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vendor_id(const std::string& value);
  std::string* _internal_mutable_vendor_id();
  public:

  // double price = 1;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // @@protoc_insertion_point(class_scope:store.ProductInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendor_id_;
    double price_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fstore_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProductQuery

// string product_name = 1;
inline void ProductQuery::clear_product_name() {
  _impl_.product_name_.ClearToEmpty();
}
inline const std::string& ProductQuery::product_name() const {
  // @@protoc_insertion_point(field_get:store.ProductQuery.product_name)
  return _internal_product_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProductQuery::set_product_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.product_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:store.ProductQuery.product_name)
}
inline std::string* ProductQuery::mutable_product_name() {
  std::string* _s = _internal_mutable_product_name();
  // @@protoc_insertion_point(field_mutable:store.ProductQuery.product_name)
  return _s;
}
inline const std::string& ProductQuery::_internal_product_name() const {
  return _impl_.product_name_.Get();
}
inline void ProductQuery::_internal_set_product_name(const std::string& value) {
  
  _impl_.product_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ProductQuery::_internal_mutable_product_name() {
  
  return _impl_.product_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ProductQuery::release_product_name() {
  // @@protoc_insertion_point(field_release:store.ProductQuery.product_name)
  return _impl_.product_name_.Release();
}
inline void ProductQuery::set_allocated_product_name(std::string* product_name) {
  if (product_name != nullptr) {
    
  } else {
    
  }
  _impl_.product_name_.SetAllocated(product_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.product_name_.IsDefault()) {
    _impl_.product_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:store.ProductQuery.product_name)
}

// -------------------------------------------------------------------

// ProductReply

// repeated .store.ProductInfo products = 1;
inline int ProductReply::_internal_products_size() const {
  return _impl_.products_.size();
}
inline int ProductReply::products_size() const {
  return _internal_products_size();
}
inline void ProductReply::clear_products() {
  _impl_.products_.Clear();
}
inline ::store::ProductInfo* ProductReply::mutable_products(int index) {
  // @@protoc_insertion_point(field_mutable:store.ProductReply.products)
  return _impl_.products_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::store::ProductInfo >*
ProductReply::mutable_products() {
  // @@protoc_insertion_point(field_mutable_list:store.ProductReply.products)
  return &_impl_.products_;
}
inline const ::store::ProductInfo& ProductReply::_internal_products(int index) const {
  return _impl_.products_.Get(index);
}
inline const ::store::ProductInfo& ProductReply::products(int index) const {
  // @@protoc_insertion_point(field_get:store.ProductReply.products)
  return _internal_products(index);
}
inline ::store::ProductInfo* ProductReply::_internal_add_products() {
  return _impl_.products_.Add();
}
inline ::store::ProductInfo* ProductReply::add_products() {
  ::store::ProductInfo* _add = _internal_add_products();
  // @@protoc_insertion_point(field_add:store.ProductReply.products)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::store::ProductInfo >&
ProductReply::products() const {
  // @@protoc_insertion_point(field_list:store.ProductReply.products)
  return _impl_.products_;
}

// -------------------------------------------------------------------

// ProductInfo

// double price = 1;
inline void ProductInfo::clear_price() {
  _impl_.price_ = 0;
}
inline double ProductInfo::_internal_price() const {
  return _impl_.price_;
}
inline double ProductInfo::price() const {
  // @@protoc_insertion_point(field_get:store.ProductInfo.price)
  return _internal_price();
}
inline void ProductInfo::_internal_set_price(double value) {
  
  _impl_.price_ = value;
}
inline void ProductInfo::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:store.ProductInfo.price)
}

// string vendor_id = 2;
inline void ProductInfo::clear_vendor_id() {
  _impl_.vendor_id_.ClearToEmpty();
}
inline const std::string& ProductInfo::vendor_id() const {
  // @@protoc_insertion_point(field_get:store.ProductInfo.vendor_id)
  return _internal_vendor_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProductInfo::set_vendor_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.vendor_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:store.ProductInfo.vendor_id)
}
inline std::string* ProductInfo::mutable_vendor_id() {
  std::string* _s = _internal_mutable_vendor_id();
  // @@protoc_insertion_point(field_mutable:store.ProductInfo.vendor_id)
  return _s;
}
inline const std::string& ProductInfo::_internal_vendor_id() const {
  return _impl_.vendor_id_.Get();
}
inline void ProductInfo::_internal_set_vendor_id(const std::string& value) {
  
  _impl_.vendor_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ProductInfo::_internal_mutable_vendor_id() {
  
  return _impl_.vendor_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ProductInfo::release_vendor_id() {
  // @@protoc_insertion_point(field_release:store.ProductInfo.vendor_id)
  return _impl_.vendor_id_.Release();
}
inline void ProductInfo::set_allocated_vendor_id(std::string* vendor_id) {
  if (vendor_id != nullptr) {
    
  } else {
    
  }
  _impl_.vendor_id_.SetAllocated(vendor_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vendor_id_.IsDefault()) {
    _impl_.vendor_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:store.ProductInfo.vendor_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace store

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fstore_2eproto
